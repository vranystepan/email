AWSTemplateFormatVersion: 2010-09-09

Parameters:
  BucketName:
    Type: String
  BucketKey:
    Type: String
    Default: issue.zip
  Version:
    Type: String
    Default: GgvqEwhUHRkPeuCKTCvwiTOGt6TWjBp4
  QueueARN:
    Description: ARN of the queue that triggers this function
    Type: String

Resources:
  Queue: 
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5

  DeadLetterQueue: 
    Type: AWS::SQS::Queue

  Policy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for creating a test database
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "sqs:ReceiveMessage"
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:ChangeMessageVisibility"
            Resource:
              - !Ref QueueARN
          - Effect: Allow
            Action:
              - "sqs:SendMessage"
            Resource:
              - !GetAtt Queue.Arn
          - Effect: Allow
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:GetItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource:
              - !GetAtt Table.Arn
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource:
              - "*"

  Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref Policy

  Function:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: go1.x
      Role: !GetAtt Role.Arn
      Handler: main
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref BucketKey
        S3ObjectVersion: !Ref Version
      Environment:
        Variables:
          CONFIG_DYNAMODB_TABLE_NAME: !Ref Table
          CONFIG_SQS_EMAIL_ISSUE_QUEUE_URL: !Ref Queue

  EventMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      FunctionName: !GetAtt Function.Arn
      EventSourceArn: !Ref QueueARN

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: Email
        AttributeType: S
      KeySchema:
      - AttributeName: Email
        KeyType: HASH

Outputs:
  QueueURL:
    Value: !Ref Queue
  QueueARN:
    Value: !GetAtt Queue.Arn
  RoleARN:
    Value: !GetAtt Role.Arn
  FunctionARN:
    Value: !GetAtt Function.Arn
  FunctionName:
    Value: !Ref Function
  TableName:
    Value: !Ref Table
  TableARN:
    Value: !GetAtt Table.Arn